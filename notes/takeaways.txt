1.TCP RFC (https://www.ietf.org/rfc/rfc793.txt)
-----------------------------------------------

Tips for performance
    * Small window causes data to be transmitted in many small segments,
      when BETTER performance is achieved with FEWER LARGE segments.
    * Sender can avoid sending small segments by waiting until window is large enough.

2. Improve TCP performance (From Wikipedia)
------------------------------------------

	* TCP timestamps for accurate measurement of RTT
	* TCP window scaling
	* TCP SACK
	* Path MTU discovery to reduce fragmentation overhead

3. Evaluation Criteria for Resource Allocation (Peterson-Davie)
--------------------------------------------------------------

	*Power of the Network = Throughput/Delay
		(-) It assumes M/M/1 queues and a single flow

4. An Experimental Study of the Learnability of Congestion Control
------------------------------------------------------------------

	* Modelling a two-bottleneck network as a single bottleneck hurt performance only mildly.
	* Weak evidence of a tradeoff between link speed operating range and performance.
	* Performance at high degrees of multiplexing may be in opposition with performance when few flows share a bottleneck. --> Prior knowledge of the expected degree of multiplexing over bottleneck links can be very beneficial when designing a congestion control protocol.
	* TCP awareness hurts performance when TCP cross-traffic is absent, but helps dramatically when present.

5. About the OBJECTIVE FUNCTION
-------------------------------

Alpha fairness metric to evaluate allocations of throughput on shared links.
A flow that receives steady-state throughput of x is assigned a score
U_a(x) = x^(1-a) / (1-a)

Then you try to maximize the sum of the scores

6. DCTCP
--------

	Parameters to configure are:
		* Marking threshold at the switches: K > (C * RTT)/7
		* Estimation gain (weight given to new packets as DCTCP computes alpha:
			g < 1.386 / (sqrt(2*(C * RTT + K)))
	*****
	Check out the section 4.3 "Benchmark Traffic" for evaluation using well-known traffic    patterns.
	*****

7. Fasterdata Host Tuning (https://fasterdata.es.net/host-tuning/background/)
----------------------------------------------------------------------------

	* TCP Buffer Sizing:
		- If buffer is too small, the TCP congestion window will never fully open up.
		- If the receive buffer is too large, TCP flow control breaks and the sender can overrun the receiver.
		  (Note: An overly big send buffer is not a big problem as long as you have excess memory.
		- Optimal buffer size  = BDP.
		- ** Changing only the send or the receive buffer size has no effect, as TCP negotiates the buffer size to be the smaller of the two,

	* Sender-side TCP buffer autotuning -> No worry to do the setsockopt() for SENDER.
	  STILL have to do it for the receiver and adjust the MAX autotuning buffer size. (2.4)

	  From 2.6.7 also receiver side autotuning!
	  So now admins only have to set the MAX buffer size.

	* EXPERT TIPS: - leave net.tcp_mem alone, as defaults are fine.
				   - Do not disable tcp_timestamps for high-speed networks.
                   - For large BDP paths (TCP window > 20MB), SACK can be very slow.




